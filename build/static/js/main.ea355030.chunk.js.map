{"version":3,"sources":["services/api.ts","assets/logo.svg","pages/Dashbord/style.ts","pages/Dashbord/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","Myroutes/index.tsx","assets/background.svg","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Repositories","div","Error","span","Dashbord","useState","newRepo","setNewRepo","inputError","setInputError","storageRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","title","user","id","Myroutes","path","exact","component","createGlobalStyle","githubBackground","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea355030.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL:'https://api.github.com',\n});\n\nexport default api;\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n    hasError: boolean;\n}\n\nexport const Title = styled.h1`\n    font-size: 48px;\n    color: #3A3A3A;\n    max-width: 450px;\n    line-height: 56px;\n    margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n    margin-top: 40px;\n    max-width: 700px;\n\n    display: flex;\n\n    input {\n        flex: 1;\n        height: 0 24px;\n        padding: 0 24px;\n        border: 0;\n        border-radius: 5px 0 0 5px;\n        color: #3A3A3A;\n        border: 2px solid #fff;\n        border-right: 0;\n\n        ${(props) => props.hasError && css`\n         border-color: #c53030;\n        `}\n\n        &::placeholder {\n            color: #a8a8b3;\n        }\n    }\n    button{\n        width: 210px;\n        height: 70px;\n        background: #04D361;\n        border-radius: 0px 5px 5px 0px;\n        border: 0;\n        color: #fff;\n        font-weight: bold;\n        transition: background-color 0.2s;\n\n        &:hover {\n            background: ${shade(0.2,'#04D361')};\n        }\n    }\n`;\nexport const Repositories = styled.div`\n margin-top: 80px;\n max-width: 700px;\n\n a{\n     background: #fff;\n     border-radius: 5px;\n     width: 100%;\n     padding: 24px;\n     display: block;\n     text-decoration: none;\n\n     display: flex;\n     align-items: center;\n     transition: transform 0.2s;\n\n     &:hover{\n         transform:translateX(5px);\n     }\n\n     & + a {\n         margin-top: 16px;\n     }\n\n     img{\n         width: 64px;\n         height: 64px;\n         border-radius: 50%;\n     }\n     div {\n         margin: 0 16px;\n         flex: 1;\n\n         strong{\n             font-size: 18px;\n             color: #3d3d4d;\n         }\n         p{\n             font-size: 18px;\n             color: #a8a8b3;\n             margin-top: 4px;\n         }\n     }\n     svg {\n         margin-left: auto;\n         color: #cbcbd6;\n     }\n }\n`;\n\nexport const Error = styled.span`\n    display: block;\n    color: #c53030;\n    margin-top: 8px;\n`\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\nimport { Title, Form, Repositories, Error } from './style';\n\ninterface Repository{\n    full_name: string;\n    description:string;\n    owner:{\n        login: string;\n        avatar_url: string;\n    };\n}\n\nconst Dashbord: React.FC = () => {\n const [newRepo, setNewRepo] = useState(''); // [] foi alterado para '' devido erro\n const [inputError, setInputError] = useState('');\n const [repositories, setRepositories] = useState<Repository[]>(() => {\n     const storageRepositories = localStorage.getItem('@githubExplorer:repositories');\n\n     if(storageRepositories) {\n         return JSON.parse(storageRepositories);\n     }else{\n        return [];\n     }\n });\n\n useEffect(() => {\n     localStorage.setItem('@githubExplorer:repositories',JSON.stringify(repositories));\n }, [repositories]);\n\n async function handleAddRepository(event: FormEvent<HTMLFormElement>):Promise<void>{\n    event.preventDefault();\n\n    if(!newRepo){\n        setInputError('Digite o autor/nome do reposit贸rio');\n        return;\n    }\n\n    try{\n        const response = await api.get<Repository>(`repos/${newRepo}`);\n\n        const repository = response.data;\n\n        setRepositories([...repositories, repository]);\n        setNewRepo('');\n        setInputError('');\n    }catch(Err){\n        setInputError('Erro na busca por esse reposit贸rio');\n    }\n\n }\n return (\n     <>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Title>Explore reposit贸rios no Github</Title>\n\n        <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n            <input\n                value={newRepo}\n                onChange={(e) => setNewRepo(e.target.value)}\n                placeholder=\"Digite o nome do reposit贸rio\"\n            />\n            <button type=\"submit\"> Pesquisar</button>\n        </Form>\n\n        {inputError && <Error>{inputError}</Error>}\n\n        <Repositories>\n            {repositories.map(repository => (\n                <Link key={repository.full_name} to={`/repositories/${repository.full_name}`}>\n                <img\n                 src={repository.owner.avatar_url}\n                 alt={repository.owner.login}\n                />\n                <div>\n                    <strong>{repository.full_name}</strong>\n                    <p>{repository.description}</p>\n                </div>\n                <FiChevronRight size={20}/>\n            </Link>\n            ))}\n        </Repositories>\n     </>\n );\n}\n\nexport default Dashbord;\n","import styled from 'styled-components'\n\nexport const Header = styled.header`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\n\na{\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n        color: #666;\n    }\n    svg{\n        margin-right: 4px;\n    }\n}\n`;\n\nexport const RepositoryInfo = styled.section`\n    margin-top: 80px;\n\n    header{\n        display: flex;\n        align-items: center;\n\n        img{\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n        }\n        div {\n            margin-left: 24px;\n\n            strong{\n                font-size: 36px;\n                color: #3d3d4d;\n            }\n            p{\n                font-size: 18px;\n                color: #737380;\n                margin-top: 4px;\n            }\n        }\n      }\n\n        ul{\n            display: flex;\n            list-style: none;\n            margin-top: 40px;\n\n            li{\n                & + li {\n                    margin-left: 80px;\n                }\n                strong{\n                    display: block;\n                    font-size: 36px;\n                    color: #3d3d4d;\n                }\n                span{\n                    display: block;\n                    margin-top: 4px;\n                    color: #6c6c80;\n                }\n            }\n        }\n\n`;\n\nexport const Issues = styled.div`\n margin-top: 80px;\n\n a{\n     background: #fff;\n     border-radius: 5px;\n     width: 100%;\n     padding: 24px;\n     display: block;\n     text-decoration: none;\n\n     display: flex;\n     align-items: center;\n     transition: transform 0.2s;\n\n     &:hover{\n         transform:translateX(5px);\n     }\n\n     & + a {\n         margin-top: 16px;\n     }\n     div {\n         margin: 0 16px;\n         flex: 1;\n\n         strong{\n             font-size: 18px;\n             color: #3d3d4d;\n         }\n         p{\n             font-size: 18px;\n             color: #a8a8b3;\n             margin-top: 4px;\n         }\n     }\n     svg {\n         margin-left: auto;\n         color: #cbcbd6;\n     }\n }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport logoImg from '../../assets/logo.svg';\nimport { Header, RepositoryInfo, Issues } from  './styles';\nimport api from '../../services/api'\n\ninterface RepositoryParams {\n    repository:string;\n}\ninterface Repository{\n    full_name: string;\n    description:string;\n    stargazers_count:number;\n    open_issues_count: number;\n    forks_count: number;\n    owner:{\n        login: string;\n        avatar_url: string;\n    };\n}\ninterface Issue{\n    id:number;\n    title:string;\n    html_url:string;\n    user:{\n        login:string;\n    }\n}\n\nconst Repository: React.FC = () => {\n    const [repository, setRepository] = useState<Repository | null >(null);\n    const [issues, setIssues] = useState<Issue[]>([]);\n\n    const { params } = useRouteMatch<RepositoryParams>();\n\n    useEffect(()=>{\n        api.get(`repos/${params.repository}`).then( response => {\n            setRepository(response.data);\n        });\n\n        api.get(`repos/${params.repository}/issues`).then( response => {\n            setIssues(response.data);\n        });\n    }, [params.repository]);\n    return (\n    <>\n      <Header>\n          <img src={logoImg} alt=\"Github Explorer\" />\n          <Link to=\"/\">\n            <FiChevronLeft size={16}/>\n            voltar\n          </Link>\n      </Header>\n      { repository ? (\n          <RepositoryInfo>\n          <header>\n            <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n            <div>\n                <strong>\n                    {repository.full_name}\n                </strong>\n                <p>\n                    {repository.description}\n                </p>\n            </div>\n          </header>\n          <ul>\n            <li>\n                <strong>{repository.stargazers_count}</strong>\n                <span>Stars</span>\n            </li>\n            <li>\n                <strong>{repository.forks_count}</strong>\n                <span>Forks</span>\n            </li>\n            <li>\n                <strong>{repository.open_issues_count}</strong>\n                <span>Issues abertas</span>\n            </li>\n          </ul>\n      </RepositoryInfo>\n      ):(\n          <p>Carregando...</p>\n      )}\n      <Issues>\n          {issues.map(issue => (\n              <a key={issue.id} href={issue.html_url}>\n              <div>\n                  <strong>{issue.title}</strong>\n                  <p>{issue.user.login}</p>\n              </div>\n              <FiChevronRight size={20}/>\n          </a>\n          ))}\n      </Issues>\n    </>\n    );\n}\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashbord from '../pages/Dashbord';\nimport Repository from '../pages/Repository';\n\nconst Myroutes: React.FC = () => (\n    <Switch>\n        <Route path=\"/\" exact component={Dashbord} />\n        <Route path=\"/repositories/:repository+\" component={Repository} />\n    </Switch>\n);\n\nexport default Myroutes;\n","export default __webpack_public_path__ + \"static/media/background.7fa45dda.svg\";","import { createGlobalStyle } from 'styled-components';\nimport githubBackground from '../assets/background.svg';\n\nexport default createGlobalStyle`\n * {\n     margin: 0;\n     padding: 0;\n     outline: 0;\n     box-sizing: border-box;\n }\n\n body {\n     background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\n     -webkit-font-smoothing: antialiased;\n }\n\n body, input, button {\n     font: 16px 'Roboto', sans-serif;\n }\n\n #root{\n     max-width: 960px;\n     margin: 0 auto;\n     padding: 40px 20px;\n }\n\n button {\n     cursor: pointer;\n }\n`;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Myroutes from './Myroutes';\nimport GlobalStyle from './styles/global';\n\nconst App:React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Myroutes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}